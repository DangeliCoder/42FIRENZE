/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test40.c                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ad-angel <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/11/16 17:11:52 by ad-angel          #+#    #+#             */
/*   Updated: 2023/11/21 19:22:17 by ad-angel         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <time.h>
#include <stdio.h>
#include <stdlib.h>

#include "libft.h"

static void	*fun(void *content)
{
	int	*res;

	printf("Function 'fun' called for content : %i.\n", *(int *)content);
	res = calloc(1, sizeof(int));
	*res = *(int *)content * 2;
	return ((void *)res);
}

static void	destroy(void *ptr)
{
	printf("Function 'destroy' called for content : %i.\n",
		*(int *)(((t_list *)ptr)->content));
	free(((t_list *)ptr)->content);
	free(ptr);
}

static void	showlst(t_list *head)
{
	while (head != NULL)
	{
		printf("%i", *((int *)head->content));
		head = head->next;
		if (head != NULL)
			printf(", ");
		else
			printf("\n");
	}
}

static void	lstdestroy(t_list *head)
{
	if (head == NULL)
		return ;
	lstdestroy(head->next);
	free(head->content);
	free(head);
}

int	main(void)
{
	int		size;
	int		*n;
	t_list	*head;
	t_list	*newnode;
	t_list	*head2;

	srand((unsigned)time(NULL));
	head = NULL;
	size = 11;
	while (size > 0)
	{
		n = calloc(1, sizeof(int));
		*n = (rand() % 200) - 100;
		printf("%i\n", *n);
		newnode = ft_lstnew(n);
		ft_lstadd_back(&head, newnode);
		size--;
	}
	showlst(head);
	head2 = ft_lstmap(head, &fun, &destroy);
	showlst(head2);
	lstdestroy(head);
	lstdestroy(head2);
	return (0);
}
